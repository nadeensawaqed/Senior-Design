class ArUcoDetect:
    def __init__(self, video_source=0):
        self.cap = cv2.VideoCapture(video_source, cv2.CAP_DSHOW)
        self.cap.set(3, 1280)
        self.cap.set(4, 1280)
        if not self.cap.isOpened():
            raise ValueError("Unable to open video source", video_source)
        self.width = self.cap.get(cv2.CAP_PROP_FRAME_WIDTH)
        self.height = self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT)

    def camera_feed(self):
        arucoDict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_APRILTAG_36h11)
        arucoParams = cv2.aruco.DetectorParameters_create()
        
        
        if self.cap.isOpened(): ### confirm camera available
            ret, frame = self.cap.read() ### begin video 
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) ### convert to grayscale
            (corners, ids, rejected) = cv2.aruco.detectMarkers(gray, arucoDict, parameters=arucoParams,
                                                               cameraMatrix=matrix_coefficients, 
                                                               distCoeff=distortion_coefficients) ### find parameters in grayscale

            x,y,w,h = 0, 0, 300, 50
            cv2.rectangle(frame, (x + 20, y + 20), (x + w, y + h), (0,255,255), -1) ### bounding rectangle for superimposed id list
            
            if np.all(ids is not None):
                ids = ids.flatten()
                for (markerCorner, markerID) in zip(corners, ids):
                    cv2.aruco.estimatePoseSingleMarkers(corners[i], 0.02, matrix_coefficients, distortion_coefficients)
                    ### extract the marker corners (which are always returned in top-left, top-right, bottom-right, and bottom-left order)
                    corners = markerCorner.reshape((4, 2))
                    (topLeft, topRight, bottomRight, bottomLeft) = corners
                    ### convert each of the (x, y)-coordinate pairs to integers
                    topRight = (int(topRight[0]), int(topRight[1]))
                    bottomRight = (int(bottomRight[0]), int(bottomRight[1]))
                    bottomLeft = (int(bottomLeft[0]), int(bottomLeft[1]))
                    topLeft = (int(topLeft[0]), int(topLeft[1]))
                    
                    ### draw the bounding box of the ArUCo detection
                    cv2.line(frame, topLeft, topRight, (0, 255, 0), 2)
                    cv2.line(frame, topRight, bottomRight, (0, 255, 0), 2)
                    cv2.line(frame, bottomRight, bottomLeft, (0, 255, 0), 2)
                    cv2.line(frame, bottomLeft, topLeft, (0, 255, 0), 2)

                    ### compute and draw the center (x, y) coordinates of the ArUco marker
                    cX = int((topLeft[0] + bottomRight[0]) / 2.0)
                    cY = int((topLeft[1] + bottomRight[1]) / 2.0)
                    cv2.circle(frame, (cX, cY), 4, (0, 0, 255), -1)
                    
                    ### put the list of found markers in the bounding rectangle defined above
                    string_ids = ', '.join([str(i) for i in ids])
                    cv2.putText(frame, 'Marker IDs Found: {}'.format(string_ids), (x+30, y+40), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 0), 1)

                    ### place the id of the marker near the actual marker
                    cv2.putText(frame, str(markerID), (topLeft[0] + 15, topLeft[1] - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
                    
            if ret: ### the boolean flag returned by read() --> if true, return the processed frame --> else return none
                return (ret, cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
                
            else:
                return (ret, None)
        else:
            return (ret, None)
                    
        def __del__(self):
            if self.cap.isOpened():
                self.cap.release()